@using Frontend.Data

@inject ClientSettingsProvider _clientSettingsProvider

<div class="alert alert-secondary">
    <h4 class="alert-heading">Settings</h4>

    <div style="max-width: 300px">
        <div class="mb-3 row">
            <label for="slideshowInterval" class="col-sm-7 col-form-label">Interval (milliseconds)</label>
            <div class="col-sm-4">
                <input id="slideshowInterval" type="number" class="form-control" step="100" value="@_slideshowIntervalMs" @onchange="OnSlideshowIntervalChange" />
            </div>
        </div>
    </div>
</div>

@code {
    private int? _slideshowIntervalMs;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        _clientSettingsProvider.OnSlideshowIntervalSettingChanged += args =>
        {
            _slideshowIntervalMs = (int)args.NewInterval.TotalMilliseconds;
            InvokeAsync(StateHasChanged);
        };
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _slideshowIntervalMs = (int?)(await _clientSettingsProvider.GetSlideshowIntervalAsync())?.TotalMilliseconds;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnSlideshowIntervalChange(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out var newIntervalMs) && newIntervalMs >= 500)
        {
            InvokeAsync(async () =>
            {
                await _clientSettingsProvider.SetSlideshowIntervalAsync(TimeSpan.FromMilliseconds(newIntervalMs));
                StateHasChanged();
            });
        }
    }
}